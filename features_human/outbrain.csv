,feature_description,code
0,`featurename` - feature_description,
1,`leak_feature_rcarson` - rcarson's leak feature bucketed into rows based on the page_view doc timestamp relative to the display timestamp (1 hour after; 1 day after and >1 day after),
2,`competing_ads_hashed` - Hashed feature of each individual competing ad in FFM,"
import hashlib

# Function to hash competing ads
def hash_competing_ads(ad_ids):
    ad_ids_str = ','.join(map(str, sorted(ad_ids)))
    return hashlib.md5(ad_ids_str.encode()).hexdigest()

# Merge Clicks with Events to get display_id and uuid
clicks_events = Clicks.merge(Events[['display_id', 'uuid']], on='display_id', how='left')

# Merge with Promoted to get ad_id and document_id
clicks_events_promoted = clicks_events.merge(Promoted[['ad_id', 'document_id']], on='ad_id', how='left')

# Group by display_id and collect all ad_ids
competing_ads = Clicks.groupby('display_id')['ad_id'].apply(list).reset_index()

# Hash the competing ads
competing_ads['competing_ads_hashed'] = competing_ads['ad_id'].apply(hash_competing_ads)

# Merge the hashed competing ads back to the Clicks table
Clicks = Clicks.merge(competing_ads[['display_id', 'competing_ads_hashed']], on='display_id', how='left')
"
3,`user_document_traffic_source_combinations` - Hashed combinations of document/traffic_source clicked by a user in page_views.treating different traffic sources separately,"
import hashlib

# Merge Pageviews with Clicks to get the user and document information
merged_df = Clicks.merge(Events, on='display_id', how='left')

# Merge the merged_df with Pageviews to get the traffic_source information
merged_df = merged_df.merge(Pageviews[['uuid', 'document_id', 'traffic_source']], on=['uuid', 'document_id'], how='left')

# Create a new column for the hashed combinations of document_id and traffic_source
merged_df['user_document_traffic_source_combinations'] = merged_df.apply(
    lambda row: hashlib.md5(f""{row['uuid']}_{row['document_id']}_{row['traffic_source']}"".encode()).hexdigest(), axis=1
)

# Add the new feature to the Clicks table
Clicks['user_document_traffic_source_combinations'] = merged_df['user_document_traffic_source_combinations']
"
4,`hashed_user_pageview_sources` - Hashed sources of all the page view documents for each user from documents_meta,"
import hashlib

# Merge Pageviews with Documents_meta to get the source_id for each pageview
pageviews_with_sources = pd.merge(Pageviews, Documents_meta[['document_id', 'source_id']], on='document_id', how='left')

# Group by uuid and aggregate the source_ids into a single string
user_pageview_sources = pageviews_with_sources.groupby('uuid')['source_id'].apply(lambda x: ' '.join(map(str, x))).reset_index()

# Hash the concatenated source_ids string for each user
user_pageview_sources['hashed_user_pageview_sources'] = user_pageview_sources['source_id'].apply(lambda x: hashlib.md5(x.encode()).hexdigest())

# Merge the hashed sources back to the Clicks table via the Events table
Clicks = pd.merge(Clicks, Events[['display_id', 'uuid']], on='display_id', how='left')
Clicks = pd.merge(Clicks, user_pageview_sources[['uuid', 'hashed_user_pageview_sources']], on='uuid', how='left')

# Drop the uuid column as it's no longer needed
Clicks.drop(columns=['uuid'], inplace=True)
"
5,`one_hour_after_clicks_documents` - Hashed feature of documents clicked by a user within one hour of the ad click,
6,`ad_doc_category_interaction` - Interaction feature of ad document category and user document category,"
# Merge Clicks with Promoted to get the ad document_id
Clicks = Clicks.merge(Promoted[['ad_id', 'document_id']], on='ad_id', how='left')
Clicks.rename(columns={'document_id': 'document_id_ad'}, inplace=True)

# Merge Clicks with Events to get the user document_id
Clicks = Clicks.merge(Events[['display_id', 'document_id']], on='display_id', how='left')
Clicks.rename(columns={'document_id': 'document_id_user'}, inplace=True)

# Merge Clicks with Documents_categories to get the ad document category
Clicks = Clicks.merge(Documents_categories[['document_id', 'category_id']], left_on='document_id_ad', right_on='document_id', how='left')
Clicks.rename(columns={'category_id': 'category_id_ad'}, inplace=True)

# Merge Clicks with Documents_categories to get the user document category
Clicks = Clicks.merge(Documents_categories[['document_id', 'category_id']], left_on='document_id_user', right_on='document_id', how='left')
Clicks.rename(columns={'category_id': 'category_id_user'}, inplace=True)

# Create the interaction feature
Clicks['ad_doc_category_interaction'] = Clicks['category_id_ad'] == Clicks['category_id_user']
Clicks = Clicks.groupby(['display_id', 'ad_id', 'clicked'])['ad_doc_category_interaction'].sum().reset_index()
"
7,`weekday_hour_interaction` - Interaction feature of weekday and hour of the user activity,"
import pandas as pd

# Convert timestamp to datetime in Events table
Events['datetime'] = pd.to_datetime(Events['timestamp'], unit='ns')

# Extract weekday and hour from datetime
Events['weekday'] = Events['datetime'].dt.weekday
Events['hour'] = Events['datetime'].dt.hour

# Create the interaction feature
Events['weekday_hour_interaction'] = Events['weekday'].astype(str) + '_' + Events['hour'].astype(str)

# Merge the interaction feature into Clicks table
Clicks = Clicks.merge(Events[['display_id', 'weekday_hour_interaction']], on='display_id', how='left')
"
8,`log_time_diff_display_doc_creation` - Log of time difference between display document creation time and current time,
9,`log_time_diff_ad_doc_creation` - Log of time difference between display document creation time and ad document creation time,
10,`user_viewed_same_publisher` - Flag if user viewed ad documents of the same publisher within page_views,
11,`user_viewed_same_source` - Flag if user viewed ad documents of the same source within page_views,"
# Merge Clicks with Promoted to get document_id for each ad
clicks_promoted = Clicks.merge(Promoted, on='ad_id', how='left')

# Merge with Events to get uuid for each display_id
clicks_promoted_events = clicks_promoted.merge(Events[['display_id', 'uuid']], on='display_id', how='left')

# Merge with Documents_meta to get source_id for each document
clicks_promoted_meta = clicks_promoted_events.merge(Documents_meta[['document_id', 'source_id']], on='document_id', how='left')

# Merge Pageviews with Documents_meta to get source_id for each document in page views
pageviews_meta = Pageviews.merge(Documents_meta[['document_id', 'source_id']], on='document_id', how='left')

# Create a flag for each user if they have viewed documents from the same source
user_source_views = pageviews_meta.groupby(['uuid', 'source_id']).size().reset_index(name='view_count')
user_source_views['user_viewed_same_source'] = user_source_views['view_count'] > 1

# Merge the flag back to the Clicks table
clicks_promoted_meta = clicks_promoted_meta.merge(user_source_views[['uuid', 'source_id', 'user_viewed_same_source']], on=['uuid', 'source_id'], how='left')

# Fill NaN values with False (user did not view the same source)
clicks_promoted_meta['user_viewed_same_source'] = clicks_promoted_meta['user_viewed_same_source']

# Add the new feature to the Clicks table
Clicks['user_viewed_same_source'] = clicks_promoted_meta['user_viewed_same_source']
"
12,`user_viewed_similar_category` - Flag if user viewed ad documents of similar category,
13,`user_viewed_similar_topic` - Flag if user viewed ad documents of similar topic,
14,`user_past_ad_interaction` - Flag if user viewed this ad in the past and whether they clicked it,"
# Merge Clicks with Promoted to get document_id for each ad
_Clicks = Clicks
Clicks = Clicks.merge(Promoted[['ad_id', 'document_id']], on='ad_id', how='left')

# Merge Clicks with Events to get user information for each display_id
Clicks = Clicks.merge(Events[['display_id', 'uuid', 'timestamp']], on='display_id', how='left')

# Merge Pageviews with Clicks to get past interactions
Pageviews = Pageviews.rename(columns={'document_id': 'pageview_document_id', 'timestamp': 'pageview_timestamp'})
Clicks = Clicks.merge(Pageviews[['uuid', 'pageview_document_id', 'pageview_timestamp']], 
                      left_on=['uuid', 'document_id'], 
                      right_on=['uuid', 'pageview_document_id'], 
                      how='left')

# Create the user_past_ad_interaction feature
Clicks['user_past_ad_interaction'] = Clicks.apply(
    lambda row: 1 if pd.notnull(row['pageview_document_id']) and row['pageview_timestamp'] < row['timestamp'] else 0, axis=1
)

# Drop unnecessary columns
Clicks = Clicks.drop(columns=['pageview_document_id', 'pageview_timestamp'])

# Ensure the new feature is in the Clicks table
Clicks['user_past_ad_interaction'] = Clicks['user_past_ad_interaction'].astype(int)

interaction = (Clicks[['display_id', 'ad_id', 'clicked', 'user_past_ad_interaction']]
               .groupby(['display_id', 'ad_id', 'clicked'])['user_past_ad_interaction']
               .max())

Clicks = _Clicks.join(interaction, on=['display_id', 'ad_id', 'clicked'], how='left')
"
15,`user_past_publisher_interaction` - Flag if user interacted with the same publisher in the past,"
# Merge Clicks with Events to get user and document information
clicks_events = Clicks.merge(Events, on='display_id', how='left')

# Merge with Promoted to get the document_id of the ad
clicks_events = clicks_events.merge(Promoted, on='ad_id', how='left', suffixes=('_event', '_ad'))

# Merge with Documents_meta to get the publisher_id of the ad document
clicks_events = clicks_events.merge(Documents_meta[['document_id', 'publisher_id']], left_on='document_id_ad', right_on='document_id', how='left')

# Merge Pageviews with Documents_meta to get the publisher_id of the viewed documents
pageviews_meta = Pageviews.merge(Documents_meta[['document_id', 'publisher_id']], on='document_id', how='left')

# Create a set of user-publisher interactions
user_publisher_interactions = pageviews_meta.groupby('uuid')['publisher_id'].apply(set).reset_index()

# Merge with clicks_events to check if the user has interacted with the same publisher before
clicks_events = clicks_events.merge(user_publisher_interactions, on='uuid', how='left', suffixes=('', '_past'))

# Fill NaN values in 'publisher_id_past' with empty sets
clicks_events['publisher_id_past'] = clicks_events['publisher_id_past'].apply(lambda x: x if isinstance(x, set) else set())

# Create the feature user_past_publisher_interaction
clicks_events['user_past_publisher_interaction'] = clicks_events.apply(
    lambda row: 1 if row['publisher_id'] in row['publisher_id_past'] else 0, axis=1
)

# Add the new feature to the Clicks table
Clicks['user_past_publisher_interaction'] = clicks_events['user_past_publisher_interaction']
"
16,`user_past_source_interaction` - Flag if user interacted with the same source in the past,"
# Merge Clicks with Events to get the user and document information
Clicks = Clicks.merge(Events[['display_id', 'uuid', 'document_id']], on='display_id', how='left')

# Merge Clicks with Promoted to get the document_id of the ad
Clicks = Clicks.merge(Promoted[['ad_id', 'document_id']], on='ad_id', how='left', suffixes=('', '_ad'))

# Merge Clicks with Documents_meta to get the source_id of the ad document
Clicks = Clicks.merge(Documents_meta[['document_id', 'source_id']], left_on='document_id_ad', right_on='document_id', how='left', suffixes=('', '_ad_right'))

# Merge Pageviews with Documents_meta to get the source_id of the viewed documents
Pageviews = Pageviews.merge(Documents_meta[['document_id', 'source_id']], on='document_id', how='left')

# Create a flag for past interaction with the same source
Pageviews['user_past_source_interaction'] = Pageviews.duplicated(subset=['uuid', 'source_id'], keep=False).astype(int)

# Aggregate the flag to get the maximum value per user and source
user_source_interaction = Pageviews.groupby(['uuid', 'source_id'])['user_past_source_interaction'].max().reset_index()

# Merge the aggregated flag back to the Clicks table
Clicks = Clicks.merge(user_source_interaction, on=['uuid', 'source_id'], how='left')

# Fill NaN values with 0 (no past interaction)
Clicks['user_past_source_interaction'] = Clicks['user_past_source_interaction']
"
17,`user_past_category_interaction` - Flag if user interacted with the same category in the past,"
# Merge Clicks with Events to get user and document information
Clicks = Clicks.merge(Events[['display_id', 'uuid', 'document_id']], on='display_id', how='left')

# Merge Clicks with Promoted to get the document_id of the ad
Clicks = Clicks.merge(Promoted[['ad_id', 'document_id']], on='ad_id', how='left', suffixes=('', '_ad'))

# Merge Clicks with Documents_categories to get the category of the ad document
Clicks = Clicks.merge(Documents_categories[['document_id', 'category_id']], left_on='document_id_ad', right_on='document_id', how='left')

# Merge Pageviews with Documents_categories to get the category of the viewed documents
Pageviews = Pageviews.merge(Documents_categories[['document_id', 'category_id']], on='document_id', how='left')

# Create a set of past user-category interactions
user_category_interactions = Pageviews.groupby(['uuid', 'category_id']).size().reset_index().rename(columns={0: 'interaction_count'})

# Merge Clicks with user_category_interactions to flag if user interacted with the same category in the past
Clicks = Clicks.merge(user_category_interactions[['uuid', 'category_id']], on=['uuid', 'category_id'], how='left', indicator=True)

# Create the user_past_category_interaction feature
Clicks['user_past_category_interaction'] = (Clicks['_merge'] == 'both').astype(int)

# Drop the temporary columns
Clicks.drop(columns=['document_id_ad', 'category_id', '_merge'], inplace=True)

Clicks = Clicks.groupby(['display_id', 'ad_id', 'clicked'])['user_past_category_interaction'].sum().reset_index()
"
18,`user_past_topic_interaction` - Flag if user interacted with the same topic in the past,"
# Merge Clicks with Events to get user and document information
clicks_events = Clicks.merge(Events, on='display_id', suffixes=('', '_event'))

# Merge with Promoted to get the document_id of the ad
clicks_events_promoted = clicks_events.merge(Promoted, on='ad_id')

# Merge with Documents_topics to get the topics of the ad documents
clicks_events_promoted_topics = clicks_events_promoted.merge(Documents_topics, left_on='document_id_y', right_on='document_id')

# Merge with Pageviews to get past interactions of the user
user_past_interactions = Pageviews.merge(Documents_topics, on='document_id')

# Create a flag for past topic interaction
user_past_interactions['user_past_topic_interaction'] = 1

# Merge the past interactions with the clicks_events_promoted_topics to check for past interactions
clicks_with_past_interactions = clicks_events_promoted_topics.merge(
    user_past_interactions[['uuid', 'topic_id', 'user_past_topic_interaction']],
    left_on=['uuid', 'topic_id'],
    right_on=['uuid', 'topic_id'],
    how='left'
)

# Fill NaN values with 0 (no past interaction)
clicks_with_past_interactions['user_past_topic_interaction'] = clicks_with_past_interactions['user_past_topic_interaction']

# Add the new feature to the Clicks table
Clicks['user_past_topic_interaction'] = clicks_with_past_interactions['user_past_topic_interaction']

# Drop intermediate DataFrame to free up memory
del clicks_events, clicks_events_promoted, clicks_events_promoted_topics, user_past_interactions, clicks_with_past_interactions
"
19,`user_future_ad_view` - Flag if the user viewed this ad in the future,"
# Merge Clicks with Promoted to get document_id for each ad
Clicks = Clicks.merge(Promoted[['ad_id', 'document_id']], on='ad_id', how='left')

# Merge Clicks with Events to get user and timestamp for each display_id
Clicks = Clicks.merge(Events[['display_id', 'uuid', 'timestamp']], on='display_id', how='left')

Pageviews = Pageviews.rename(columns={'timestamp': 'timestamp_pageview'})

# Merge Clicks with Pageviews to get future page views of the same ad by the same user
Clicks = Clicks.merge(Pageviews[['uuid', 'document_id', 'timestamp_pageview']], on=['uuid', 'document_id'], how='left', suffixes=('', '_pageview'))

# Create the user_future_ad_view feature
Clicks['user_future_ad_view'] = (Clicks['timestamp_pageview'] > Clicks['timestamp']).astype(int)

# Drop the intermediate columns used for merging
Clicks = Clicks.drop(columns=['document_id', 'timestamp_pageview'])

# Ensure the Clicks table is sorted by display_id and ad_id
Clicks = Clicks.sort_values(by=['display_id', 'ad_id']).reset_index(drop=True)

Clicks = Clicks.groupby(['display_id', 'ad_id', 'clicked'])['user_future_ad_view'].sum().reset_index()
"
20,`user_future_ad_doc_view` - Flag if the user viewed ad documents in the future,
21,`user_future_campaign_interaction` - Flag if the user has not viewed this ad in the future but viewed ads of the same campaign,"
# Merge Clicks with Promoted to get campaign_id
Clicks = Clicks.merge(Promoted[['ad_id', 'campaign_id']], on='ad_id', how='left')

# Merge Clicks with Events to get user and timestamp information
Clicks = Clicks.merge(Events[['display_id', 'uuid', 'timestamp']], on='display_id', how='left')

# Merge Pageviews with Promoted to get campaign_id for each pageview
Pageviews = Pageviews.merge(Promoted[['document_id', 'campaign_id']], on='document_id', how='left')

# Create a DataFrame to track future campaign interactions
future_interactions = Pageviews[['uuid', 'campaign_id', 'timestamp']].copy()
future_interactions.rename(columns={'timestamp': 'future_timestamp'}, inplace=True)

# Merge Clicks with future_interactions to check for future interactions
Clicks = Clicks.merge(future_interactions, on=['uuid', 'campaign_id'], how='left')

# Create the user_future_campaign_interaction feature
Clicks['user_future_campaign_interaction'] = ((Clicks['future_timestamp'] > Clicks['timestamp']) & (Clicks['future_timestamp'].notnull())).astype(int)

# Drop the temporary columns used for merging
Clicks.drop(columns=['campaign_id', 'uuid', 'timestamp', 'future_timestamp'], inplace=True)

Clicks = Clicks.groupby(['display_id', 'ad_id', 'clicked'])['user_future_campaign_interaction'].sum().reset_index()
"
22,`user_page_view_count` - Total number of page views by each user,"
user_page_view_count = Pageviews.groupby('uuid').size().reset_index(name='user_page_view_count')
Clicks = Clicks.merge(Events[['display_id', 'uuid']], on='display_id', how='left')
Clicks = Clicks.merge(user_page_view_count, on='uuid', how='left')
Clicks.drop(columns=['uuid'], inplace=True)
"
23,`ad_landing_page_view_count` - Total number of page views for each ad's landing page,"
# Merge Pageviews with Promoted to get the document_id for each ad
pageviews_promoted = Pageviews.merge(Promoted, on='document_id', how='inner')

# Count the number of page views for each ad's landing page
ad_landing_page_view_count = pageviews_promoted.groupby('ad_id').size().reset_index(name='ad_landing_page_view_count')

# Merge the count back to the Clicks table
Clicks = Clicks.merge(ad_landing_page_view_count, on='ad_id', how='left')

# Fill NaN values with 0 (in case some ads have no page views)
Clicks['ad_landing_page_view_count'] = Clicks['ad_landing_page_view_count']
"
24,`ad_impression_counts` - Counts of impressions for each ad_id landing document_id campaign_id and advertiser_id,"
# Merge Clicks with Promoted to get ad-related information
Clicks = Clicks.merge(Promoted, on='ad_id', how='left')

# Calculate ad impression counts
ad_impression_counts = Clicks.groupby(['ad_id', 'document_id', 'campaign_id', 'advertiser_id']).size().reset_index(name='ad_impression_counts')

# Merge the ad impression counts back to the Clicks table
Clicks = Clicks.merge(ad_impression_counts, on=['ad_id', 'document_id', 'campaign_id', 'advertiser_id'], how='left')
"
25,`landing_page_confidence_vector` - A vector for each landing page composed of confidence levels from documents_*.csv used as numeric data in FFM,"
import numpy as np

# Merge Promoted with Documents_topics, Documents_entities, and Documents_categories to get confidence levels
promoted_topics = Promoted.merge(Documents_topics, on='document_id', how='left')
promoted_entities = Promoted.merge(Documents_entities, on='document_id', how='left')
promoted_categories = Promoted.merge(Documents_categories, on='document_id', how='left')

# Aggregate confidence levels by ad_id
topics_confidence = promoted_topics.groupby('ad_id')['confidence_level'].apply(list).reset_index(name='topics_confidence')
entities_confidence = promoted_entities.groupby('ad_id')['confidence_level'].apply(list).reset_index(name='entities_confidence')
categories_confidence = promoted_categories.groupby('ad_id')['confidence_level'].apply(list).reset_index(name='categories_confidence')

# Merge aggregated confidence levels back to Clicks
Clicks = Clicks.merge(topics_confidence, on='ad_id', how='left')
Clicks = Clicks.merge(entities_confidence, on='ad_id', how='left')
Clicks = Clicks.merge(categories_confidence, on='ad_id', how='left')

# Fill NaN values with empty lists
Clicks['topics_confidence'] = Clicks['topics_confidence'].apply(lambda x: x if isinstance(x, list) else [])
Clicks['entities_confidence'] = Clicks['entities_confidence'].apply(lambda x: x if isinstance(x, list) else [])
Clicks['categories_confidence'] = Clicks['categories_confidence'].apply(lambda x: x if isinstance(x, list) else [])

# Combine all confidence levels into a single vector
Clicks['landing_page_confidence_vector'] = Clicks.apply(
    lambda row: row['topics_confidence'] + row['entities_confidence'] + row['categories_confidence'], axis=1
)

# Drop intermediate columns
Clicks.drop(columns=['topics_confidence', 'entities_confidence', 'categories_confidence'], inplace=True)
"
26,`user_confidence_vector` - Average of document confidence vectors viewed by each user used as numeric data in FFM,"
import pandas as pd

# Merge Pageviews with Documents_topics to get confidence levels for each document viewed by each user
pageviews_topics = pd.merge(Pageviews, Documents_topics, on='document_id', how='left')

# Calculate the average confidence vector for each user
user_confidence_vector = pageviews_topics.groupby('uuid')['confidence_level'].mean().reset_index()
user_confidence_vector.columns = ['uuid', 'user_confidence_vector']

# Merge Events with Clicks to get the uuid for each display_id in Clicks
events_clicks = pd.merge(Events[['display_id', 'uuid']], Clicks, on='display_id', how='right')

# Merge the user confidence vector with the Clicks table
Clicks = pd.merge(events_clicks, user_confidence_vector, on='uuid', how='left')

# Drop the uuid column as it is no longer needed
Clicks = Clicks.drop(columns=['uuid'])
"
27,`ad_page_landing_page_dot_product` - Inner dot product of document confidence vectors of ad impression page and ad landing page,
28,`user_landing_page_dot_product` - Inner dot product of user confidence vector and ad landing page document confidence vector,
29,`xgb_leaf_for_ffm_feature` - XGBoost leaf node features used for FFM,
30,`immediate_post_click_document` - Document viewed immediately after a click event,
