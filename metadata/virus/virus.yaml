human_feature_desc:
  CoolSt1Smth02: Station 1 cooling degree days smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  DepartSt1Smth02: Station 1 temperature departure from normal smoothed with local
    polynomial regression fitting with a span of 0.4 within the year
  DewPoint: Dew point temperature
  DewPointSt1Smth02: Station 1 dew point temperature smoothed with local polynomial
    regression fitting with a span of 0.4 within the year
  DewPointSt2Smth02: Station 2 dew point temperature smoothed with local polynomial
    regression fitting with a span of 0.4 within the year
  FG: Binary feature indicating the presence of fog
  HeatSt1Smth02: Station 1 heating degree days smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  NumBatchesPrevious30Max: Maximum of NumBatches for the same Trap and Species over
    the previous 30 days
  NumBatchesPrevious30Sum: Sum of NumBatches for the same Trap and Species over the
    previous 30 days
  PrecipTotalSt1Smth02: Station 1 total precipitation smoothed with local polynomial
    regression fitting with a span of 0.4 within the year
  PrecipTotalSt2Smth02: Station 2 total precipitation smoothed with local polynomial
    regression fitting with a span of 0.4 within the year
  ResultDirSt1Smth02: Station 1 resultant wind direction smoothed with local polynomial
    regression fitting with a span of 0.4 within the year
  ResultDirSt2Smth02: Station 2 resultant wind direction smoothed with local polynomial
    regression fitting with a span of 0.4 within the year
  SnowFallSt1Smth02: Station 1 snowfall amount smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  TS: Binary feature indicating the presence of a thunderstorm
  TavgSt1Smth02: Station 1 average temperature smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  TavgSt2Smth02: Station 2 average temperature smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  TmaxSt1Smth02: Station 1 maximum temperature smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  TmaxSt2Smth02: Station 2 maximum temperature smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  TminSt1Smth02: Station 1 minimum temperature smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  TminSt2Smth02: Station 2 minimum temperature smoothed with local polynomial regression
    fitting with a span of 0.4 within the year
  TrapCount: "Number of mosquito batches for a given \uFF08Trap; Date and Species\uFF09"
  TrapCountPrev: TrapCount value from the previous instance when TrapCount was non-zero
  TrapCountPrevAge: Number of days since TrapCount was last non-zero. Capped at 90
    days
  Trap_code: traps coded as ordinal sorted by average WnvPresent inside each Trap
human_feature_impl:
  CoolSt1Smth02: .nan
  DepartSt1Smth02: "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model\
    \ import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\
    \n# Filter for Station 1 and sort by date\nweather_station1 = Weather[Weather['Station']\
    \ == 1].sort_values('Date')\n\n# Encode the date to numeric values for regression\n\
    weather_station1['Date'] = pd.to_datetime(weather_station1['Date'])\nweather_station1['Date_ordinal']\
    \ = weather_station1['Date'].map(pd.Timestamp.toordinal)\n\n# Check if there are\
    \ any rows in the filtered weather data\nif not weather_station1.empty:\n    #\
    \ Prepare the data for polynomial regression\n    X = weather_station1[['Date_ordinal']]\n\
    \    y = weather_station1['Depart']\n\n    # Apply polynomial regression with\
    \ degree 2\n    poly = PolynomialFeatures(degree=2)\n    X_poly = poly.fit_transform(X)\n\
    \    poly_reg_model = LinearRegression()\n    poly_reg_model.fit(X_poly, y)\n\n\
    \    # Predict smoothed values\n    weather_station1['DepartSt1Smth02'] = poly_reg_model.predict(X_poly)\n\
    else:\n    weather_station1['DepartSt1Smth02'] = np.nan\n\n# Merge the smoothed\
    \ feature with the Virus table\nVirus['Date'] = pd.to_datetime(Virus['Date'])\n\
    Virus = Virus.merge(weather_station1[['Date', 'DepartSt1Smth02']], on='Date',\
    \ how='left')\n"
  DewPoint: '

    Virus[''Date''] = pd.to_datetime(Virus[''Date''])

    Weather[''Date''] = pd.to_datetime(Weather[''Date''])


    # Assuming the weather data is averaged from different stations.

    # We might need additional logic to select the appropriate station


    # Merge Virus with Weather on Date

    Virus = Virus.merge(Weather.groupby(''Date'')[''DewPoint''].mean().reset_index(),
    on=''Date'', how=''left'')

    '
  DewPointSt1Smth02: "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model\
    \ import LinearRegression\n\n# Filter Weather data for Station 1\nweather_station1\
    \ = Weather[Weather['Station'] == 1]\n\n# Sort by date\nweather_station1 = weather_station1.sort_values('Date')\n\
    \n# Convert Date to ordinal for regression\nweather_station1['DateOrdinal'] =\
    \ pd.to_datetime(weather_station1['Date']).apply(lambda x: x.toordinal())\n\n\
    # Apply local polynomial regression fitting (using a simple linear regression\
    \ as an approximation)\nspan = 0.4\nn = len(weather_station1)\nhalf_window = int(span\
    \ * n / 2)\n\nsmoothed_dewpoint = []\n\nfor i in range(n):\n    start = max(0,\
    \ i - half_window)\n    end = min(n, i + half_window + 1)\n    window = weather_station1.iloc[start:end]\n\
    \    \n    X = window['DateOrdinal'].values.reshape(-1, 1)\n    y = window['DewPoint'].values\n\
    \    \n    model = LinearRegression()\n    model.fit(X, y)\n    \n    smoothed_value\
    \ = model.predict([[weather_station1.iloc[i]['DateOrdinal']]])[0]\n    smoothed_dewpoint.append(smoothed_value)\n\
    \nweather_station1['DewPointSt1Smth02'] = smoothed_dewpoint\n\n# Merge the smoothed\
    \ DewPoint with the Virus table\nVirus = Virus.merge(weather_station1[['Date',\
    \ 'DewPointSt1Smth02']], on='Date', how='left')\n"
  DewPointSt2Smth02: .nan
  FG: '

    Virus[''Date''] = pd.to_datetime(Virus[''Date''])

    Weather[''Date''] = pd.to_datetime(Weather[''Date''])


    # Merge Virus with Weather on Date

    merged_df = pd.merge(Virus, Weather, on=''Date'', how=''left'')


    # Create the FG feature based on CodeSum, handling NaN values

    merged_df[''FG''] = merged_df[''CodeSum''].fillna('''').apply(lambda x: 1 if ''FG''
    in x else 0)


    # Add the FG feature back to the Virus table

    Virus[''FG''] = merged_df[''FG'']

    '
  HeatSt1Smth02: .nan
  NumBatchesPrevious30Max: "\nimport pandas as pd\nfrom datetime import timedelta\n\
    \n# Convert Date columns to datetime\nVirus['Date'] = pd.to_datetime(Virus['Date'])\n\
    \n# Initialize the new feature column with NaN values\nVirus['NumBatchesPrevious30Max']\
    \ = float('nan')\n\n# Iterate over each row to calculate the feature\nfor idx,\
    \ row in Virus.iterrows():\n    # Define the date range\n    start_date = row['Date']\
    \ - timedelta(days=30)\n    end_date = row['Date']\n    \n    # Filter the Virus\
    \ DataFrame for the same Trap and Species within the date range\n    mask = (Virus['Trap']\
    \ == row['Trap']) & (Virus['Species'] == row['Species']) & (Virus['Date'] >= start_date)\
    \ & (Virus['Date'] < end_date)\n    filtered_df = Virus[mask]\n    \n    # Calculate\
    \ the maximum NumMosquitos in the filtered DataFrame\n    if not filtered_df.empty:\n\
    \        max_num_batches = filtered_df['NumMosquitos'].max()\n    else:\n    \
    \    max_num_batches = 0\n    \n    # Assign the calculated value to the new feature\
    \ column\n    Virus.at[idx, 'NumBatchesPrevious30Max'] = max_num_batches\n\n#\
    \ Display the updated Virus DataFrame\nprint(Virus.head())\n"
  NumBatchesPrevious30Sum: "\nimport pandas as pd\n\n# Ensure Date is in datetime\
    \ format\nVirus['Date'] = pd.to_datetime(Virus['Date'])\n\n# Sort the Virus DataFrame\
    \ by Trap, Species, and Date\nVirus = Virus.sort_values(by=['Trap', 'Species',\
    \ 'Date'])\n\n# Create a new column for the sum of NumMosquitos over the previous\
    \ 30 days\nVirus['NumBatchesPrevious30Sum'] = Virus.groupby(['Trap', 'Species']).apply(\n\
    \    lambda group: group.set_index('Date')['NumMosquitos'].rolling('30D').sum().shift(1)\n\
    ).reset_index(level=['Trap', 'Species', 'Date'], drop=True)\n\n# Fill NaN values\
    \ with 0 (if needed)\nVirus['NumBatchesPrevious30Sum'] = Virus['NumBatchesPrevious30Sum']\n"
  PrecipTotalSt1Smth02: .nan
  PrecipTotalSt2Smth02: "\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing\
    \ import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\
    \n# Assuming Virus, Spray, and Weather are already loaded as DataFrames\n\n# Filter\
    \ Weather data for Station 2\nweather_station2 = Weather[Weather['Station'] ==\
    \ 2]\n\n# Ensure Date is in datetime format\nweather_station2['Date'] = pd.to_datetime(weather_station2['Date'])\n\
    Virus['Date'] = pd.to_datetime(Virus['Date'])\n\n# Sort by Date\nweather_station2\
    \ = weather_station2.sort_values(by='Date')\n\n# Extract the year from the Date\n\
    weather_station2['Year'] = weather_station2['Date'].dt.year\n\n# Initialize a\
    \ column for smoothed precipitation\nweather_station2['PrecipTotalSt2Smth02']\
    \ = np.nan\n\n# Perform local polynomial regression fitting (LOESS) on PrecipTotal\
    \ for each year\nfor year in weather_station2['Year'].unique():\n    yearly_data\
    \ = weather_station2[weather_station2['Year'] == year]\n    if len(yearly_data)\
    \ > 1:\n        X = np.arange(len(yearly_data)).reshape(-1, 1)\n        y = yearly_data['PrecipTotal'].values\n\
    \        y_idx = ~np.isnan(y)\n        y_notnan = y[y_idx]\n        X_notnan =\
    \ X[y_idx]\n        \n        # Polynomial regression with degree 2\n        poly\
    \ = PolynomialFeatures(degree=2)\n        X_poly_notnan = poly.fit_transform(X_notnan)\n\
    \        \n        model = LinearRegression()\n        model.fit(X_poly_notnan,\
    \ y_notnan)\n\n        X_poly = poly.transform(X)\n        smoothed_precip = model.predict(X_poly)\n\
    \        weather_station2.loc[weather_station2['Year'] == year, 'PrecipTotalSt2Smth02']\
    \ = smoothed_precip\n\n# Merge the smoothed precipitation data with the Virus\
    \ DataFrame\nVirus = Virus.merge(weather_station2[['Date', 'PrecipTotalSt2Smth02']],\
    \ on='Date', how='left')\n"
  ResultDirSt1Smth02: .nan
  ResultDirSt2Smth02: .nan
  SnowFallSt1Smth02: .nan
  TS: '

    Virus[''TS''] = Virus[''Date''].isin(Weather[Weather[''CodeSum''].str.contains(''TS'')][''Date'']).astype(int)

    '
  TavgSt1Smth02: "\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model\
    \ import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\
    \ndef add_smoothed_temperature(Virus, Weather):\n    # Filter weather data for\
    \ Station 1\n    weather_station1 = Weather[Weather['Station'] == 1]\n\n    #\
    \ Convert Date to datetime\n    weather_station1['Date'] = pd.to_datetime(weather_station1['Date'])\n\
    \    Virus['Date'] = pd.to_datetime(Virus['Date'])\n\n    # Sort by Date\n   \
    \ weather_station1 = weather_station1.sort_values('Date')\n\n    # Extract the\
    \ year from the date\n    weather_station1['Year'] = weather_station1['Date'].dt.year\n\
    \n    # Apply polynomial regression smoothing within each year\n    def smooth_tavg(group):\n\
    \        X = np.arange(len(group)).reshape(-1, 1)\n        y = group['Tavg'].values\n\
    \        y_idx = ~group['Tavg'].isna().values\n        y_notnan = y[y_idx]\n \
    \       X_notnan = X[y_idx]\n        poly = PolynomialFeatures(degree=2)\n   \
    \     X_poly_notnan = poly.fit_transform(X_notnan)\n        model = LinearRegression()\n\
    \        model.fit(X_poly_notnan, y_notnan)\n        X_poly = poly.transform(X)\n\
    \        y_smooth = model.predict(X_poly)\n        return pd.Series(y_smooth,\
    \ index=group.index)\n\n    weather_station1['TavgSt1Smth02'] = weather_station1.groupby('Year').apply(smooth_tavg).reset_index(level=0,\
    \ drop=True)\n\n    # Merge the smoothed values with the Virus table\n    Virus\
    \ = Virus.merge(weather_station1[['Date', 'TavgSt1Smth02']], on='Date', how='left')\n\
    \n    return Virus\n\n# Example usage:\n# Virus = pd.read_csv('Virus.csv')\n#\
    \ Weather = pd.read_csv('Weather.csv')\nVirus = add_smoothed_temperature(Virus,\
    \ Weather)\n# print(Virus.head())\n"
  TavgSt2Smth02: .nan
  TmaxSt1Smth02: .nan
  TmaxSt2Smth02: .nan
  TminSt1Smth02: .nan
  TminSt2Smth02: .nan
  TrapCount: '

    Virus[''TrapCount''] = Virus.groupby([''Trap'', ''Date'', ''Species''])[''NumMosquitos''].transform(''count'')

    '
  TrapCountPrev: '

    Virus = Virus.sort_values(by=[''Trap'', ''Date''])

    Virus[''TrapCountPrev''] = Virus.groupby(''Trap'')[''NumMosquitos''].shift()

    '
  TrapCountPrevAge: "\nimport pandas as pd\n\n# Ensure the Date column is in datetime\
    \ format\nVirus['Date'] = pd.to_datetime(Virus['Date'])\n\n# Sort the Virus DataFrame\
    \ by Trap and Date\nVirus = Virus.sort_values(by=['Trap', 'Date'])\n\n# Initialize\
    \ the new column with default value 90\nVirus['TrapCountPrevAge'] = 90\n\n# Iterate\
    \ over each trap\nfor trap in Virus['Trap'].unique():\n    trap_data = Virus[Virus['Trap']\
    \ == trap]\n    last_non_zero_date = None\n    \n    for idx, row in trap_data.iterrows():\n\
    \        if row['NumMosquitos'] > 0:\n            last_non_zero_date = row['Date']\n\
    \        if last_non_zero_date is not None:\n            days_since_last_non_zero\
    \ = (row['Date'] - last_non_zero_date).days\n            Virus.at[idx, 'TrapCountPrevAge']\
    \ = min(days_since_last_non_zero, 90)\n\n# Reset the index to maintain the original\
    \ order\nVirus = Virus.reset_index(drop=True)\n"
  Trap_code: '

    # Calculate the average WnvPresent for each Trap

    trap_avg_wnv = Virus.groupby(''Trap'')[''WnvPresent''].mean().sort_values().reset_index()


    # Create a mapping from Trap to ordinal code based on the sorted average WnvPresent

    trap_avg_wnv[''Trap_code''] = range(1, len(trap_avg_wnv) + 1)

    trap_code_mapping = trap_avg_wnv.set_index(''Trap'')[''Trap_code''].to_dict()


    # Map the Trap to the corresponding Trap_code in the Virus table

    Virus[''Trap_code''] = Virus[''Trap''].map(trap_code_mapping)

    '
name: virus
table_path: data/virus
table_schemas:
- columns:
  - description: date that the WNV test is performed
    dtype: datetime
    name: Date
  - description: Unknown feature
    dtype: foreign_key
    link_to: Day.Date
    name: Date2
  - description: approximate address of the location of trap. This is used to send
      to the GeoCoder.
    dtype: text
    name: Address
  - description: the species of mosquitos
    dtype: category
    name: Species
  - description: block number of address
    dtype: float
    name: Block
  - description: street name
    dtype: text
    name: Street
  - description: Id of the trap
    dtype: category
    name: Trap
  - description: approximate address returned from GeoCoder
    dtype: text
    name: AddressNumberAndStreet
  - description: Latitude returned from GeoCoder
    dtype: float
    name: Latitude
  - description: Longitude returned from GeoCoder
    dtype: float
    name: Longitude
  - description: accuracy returned from GeoCoder
    dtype: float
    name: AddressAccuracy
  - description: number of mosquitoes caught in this trap
    dtype: float
    name: NumMosquitos
  - description: whether West Nile Virus was present in these mosquitos. 1 means WNV
      is present, and 0 means not present.
    dtype: bool
    name: WnvPresent
  name: Virus
  time_column: null
- columns:
  - description: Weather station identifier
    dtype: category
    name: Station
  - description: Date of the weather observation
    dtype: datetime
    name: Date
  - description: Unknown feature
    dtype: foreign_key
    link_to: Day.Date
    name: Date2
  - description: Maximum temperature
    dtype: float
    name: Tmax
  - description: Minimum temperature
    dtype: float
    name: Tmin
  - description: Average temperature
    dtype: float
    name: Tavg
  - description: Departure from normal temperature
    dtype: float
    name: Depart
  - description: Dew point temperature
    dtype: float
    name: DewPoint
  - description: Wet bulb temperature
    dtype: float
    name: WetBulb
  - description: Heating degree days
    dtype: float
    name: Heat
  - description: Cooling degree days
    dtype: float
    name: Cool
  - description: Sunrise time
    dtype: float
    name: Sunrise
  - description: Sunset time
    dtype: float
    name: Sunset
  - description: Weather phenomena codes
    dtype: category
    name: CodeSum
  - description: Depth of snow
    dtype: category
    name: Depth
  - description: Indicator for water present
    dtype: category
    name: Water1
  - description: Amount of snowfall
    dtype: category
    name: SnowFall
  - description: Total precipitation
    dtype: float
    name: PrecipTotal
  - description: Station pressure
    dtype: float
    name: StnPressure
  - description: Sea level pressure
    dtype: float
    name: SeaLevel
  - description: Resultant wind speed
    dtype: float
    name: ResultSpeed
  - description: Resultant wind direction
    dtype: category
    name: ResultDir
  - description: Average wind speed
    dtype: float
    name: AvgSpeed
  name: Weather
  time_column: Date
- columns:
  - description: the date of the spray
    dtype: datetime
    name: Date
  - description: Unknown feature
    dtype: foreign_key
    link_to: Day.Date
    name: Date2
  - description: the time of the spray
    dtype: datetime
    name: Time
  - description: the Latitude of the spray
    dtype: float
    name: Latitude
  - description: the Longitude of the spray
    dtype: float
    name: Longitude
  name: Spray
  time_column: null
target_column: WnvPresent
target_table: Virus
task_split: null
